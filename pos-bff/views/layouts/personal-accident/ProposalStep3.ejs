getDateRangeFromAge = (age) => {
    let date = new Date();
    let minRange = date - ((age + 2) * 1000 * 60 * 60 * 24 * 365);	
    let maxRange = date - ((age - 2) * 1000 * 60 * 60 * 24 * 365);	
    minRange = new Date(minRange);	
    maxRange  = new Date(maxRange);	
    minRange.setHours(0,0,0);	
    minRange.setDate((date).getDate()+1);	
    maxRange.setHours(23,59,59);	
    maxRange.setDate((date).getDate());
    return {
      minDate:minRange,
      maxDate:maxRange
    }
  }
  
  window.personalAccidentProposalFormStep3 = {
    formBuilder: {
      heading:"Nominee Details",
      steps: [
      {
        name: "Nominee Details",
        submitButtonLabel: "Submit",
        submitButtonSticky: false,
        submitButtonLoader: false,
        fields: {
            nomineeName : {
              type: "TextField",
              id: "nomineeName",
              name: "nomineeName",
              label: "Enter Nominee's Full Name",
              value: "",
              autoComplete: "nomineeName",
              variant: "filled",
              span: 6,
              validators: ["isEmpty","isSpecialChar", "isContainNumber", "!isAtLeadThreeChar","!isValidName"],
              errormessages: [
                "Please enter the name.",
                "Special Characters are not allowed in Full Name.",
                "Numbers are not allowed in Full Name.",
                "Please enter at least three characters",
                "Please enter Full Name."
              ],
              onChange: (event, step, next) => {
              }
            },
            nomineeRelation : {
              type:"SelectWithLabel",
              id:"nomineeRelation",
              name:"nomineeRelation",
              label:"Relationship To Proposer",
              labelAuto:"Relationship To Proposer",
              options: [],
              span: 6,
              value: "",
              variant: "filled",
              validators: "",
              errormessages: ["Please select the relation"],
              onChange: (event, step, next) => {
              
              next(step);
            }
            },
            nomineeDob : {
              type: "DatePicker",
              id: "nomineeDob",
              name: "nomineeDob",
              label: "Date Of Birth",
              variant: "filled",
              maxDate: "",
              minDate: "",
              span: 6,
              validators: ["isEmpty"],
              errormessages: ["This field is required"],
            }
        },
        onLoad: function (step, next){
          let maxDate = new Date();
          let minDate = new Date();
          minDate.setYear(minDate.getFullYear() - 99);
          minDate.setDate(minDate.getDate() + 1);
          maxDate.setYear(maxDate.getFullYear() - 18);
          step.fields.nomineeDob.minDate = minDate;
          step.fields.nomineeDob.maxDate = maxDate;
         let nomineeDetails = JSON.parse(sessionStorage.getItem('nomineeDetails'));
         let relationList = [];
         nomineeDetails.relations.map(relation => {
            relationList.push({
                value: relation.relation,
                label : relation.relation
            })
         })
         step.fields.nomineeRelation.options = relationList;
         step.fields.nomineeName.value = nomineeDetails.name;
         step.fields.nomineeRelation.value = nomineeDetails.relationship_text;
         step.fields.nomineeDob.value = nomineeDetails.dob;
         next(step);
        }

      }
      ],
      activeStep: 0,
      customValidators: {
        isValidName: function (str) {
          var regexp = new RegExp(/^[a-z]([-']?[a-z]+)*( [a-z]([-']?[a-z]+)*)+$/i);
          return regexp.test(str);
        },
        isValidIncome: function (str) {
          var regexp = new RegExp(
            /^[0-9]*$/i
          );
          return regexp.test(str);
        },
        isValidPanCard: function (str){
          var regexp = new RegExp(/^([A-Z]){5}([0-9]){4}([A-Z]){1}?$/i);
          return regexp.test(str);
        }
      },
    },
  }